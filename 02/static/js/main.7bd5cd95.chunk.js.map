{"version":3,"sources":["header.js","App.js","serviceWorker.js","index.js"],"names":["Header","idLocale","require","Moment","updateLocale","react_default","a","createElement","src","alt","format","Component","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addTodo","e","preventDefault","jam","refs","value","aktivitas","state","todos","push","setState","formulir","reset","focus","removeTodo","i","splice","_this2","className","header","ref","type","size","placeholder","onClick","react_transition_group","transitionName","transitionEnter","transitionEnterTimeout","transitionLeave","transitionLeaveTimeout","map","data","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAiBeA,mLAZX,IAAIC,EAAWC,EAAQ,IAEvB,OADAC,IAAOC,aAAa,KAAMH,GAExBI,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,IAAI,iEAAiEC,IAAI,WAC9EJ,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,SAAIJ,MAASO,OAAO,QAApB,IAA8BP,MAASO,OAAO,gBAR/BC,qBCiENC,cA5Df,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAKPQ,QAAQ,SAACC,GACRA,EAAEC,iBACF,IAAIC,EAAIV,EAAKW,KAAKD,IAAIE,MAClBC,EAAUb,EAAKW,KAAKE,UAAUD,MAElCZ,EAAKc,MAAMC,MAAMC,KAAK,CAACN,MAAKG,cAC5Bb,EAAKiB,SAAS,CAAEF,MAAOf,EAAKc,MAAMC,QAElCf,EAAKW,KAAKO,SAASC,QACnBnB,EAAKW,KAAKD,IAAIU,SAfGpB,EAqBlBqB,WAAa,SAACC,GACbtB,EAAKc,MAAMC,MAAMQ,OAAOD,EAAE,GAC1BtB,EAAKiB,SAAS,CAACF,MAAMf,EAAKc,MAAMC,SArBhCf,EAAKc,MAAM,CAAEC,MAAO,IAFHf,wEA2BR,IAAAwB,EAAArB,KACR,OACCZ,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,OAChBlC,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAAA,QAAMkC,IAAI,WAAWF,UAAU,eACvBlC,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,OAAOH,UAAU,eAAeI,KAAK,KAAKF,IAAI,MAAMG,YAAY,kBAC5EvC,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,OAAOH,UAAU,eAAeI,KAAK,KAAKF,IAAI,YAAYG,YAAY,oBAClFvC,EAAAC,EAAAC,cAAA,UAAQsC,QAAS5B,KAAKI,QAASkB,UAAU,gBAAzC,WAETlC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAACuC,EAAA,mBAAD,CACSC,eAAe,UACfC,iBAAiB,EACjBC,uBAAwB,IACxBC,iBAAiB,EACjBC,uBAAwB,KAChClC,KAAKW,MAAMC,MAAMuB,IAAI,SAACC,EAAKjB,GAAN,OACtB/B,EAAAC,EAAAC,cAAA,MAAI+C,IAAKlB,GACN/B,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,gBAChBlC,EAAAC,EAAAC,cAAA,UAAQsC,QAAS,kBAAIP,EAAKH,WAAWC,IAAIG,UAAU,0BAAnD,WADC,IAC6Fc,EAAK7B,IADlG,MAC0G6B,EAAK1B,yBAlDnGhB,aCME4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7bd5cd95.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Moment from 'moment';\r\n\r\nclass Header extends Component {\r\n  render(){\r\n    let idLocale = require('moment/locale/id');\r\n    Moment.updateLocale('id', idLocale);\r\n    return (\r\n      <div>\r\n      <img src=\"https://img2.apk.tools/150/2/f/a/com.koller.lukas.todolist.png\" alt=\"avatar\" />\r\n      <h3>Aplikasi Aktivitas Harian</h3>\r\n      <p>{Moment().format('dddd')} {Moment().format('LLL')}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, {Component} from 'react';\n//import HelloWorld from './HelloWorld';\nimport './App.css';\nimport Header from './header';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nclass App extends Component {\n//initial\nconstructor(props){\n\tsuper(props);\n\tthis.state={ todos: []};\n}\t\n\n\naddTodo=(e)=> {\n\te.preventDefault();\n\tlet jam=this.refs.jam.value;\n\tlet aktivitas=this.refs.aktivitas.value;\n\t\n\tthis.state.todos.push({jam, aktivitas});\n\tthis.setState({ todos: this.state.todos });\n\t\n\tthis.refs.formulir.reset();\n\tthis.refs.jam.focus();\n\n}\n\n\n\nremoveTodo = (i) => {\n\tthis.state.todos.splice(i,1);\n\tthis.setState({todos:this.state.todos});\n\t\n}\n\n\trender() {\n  return (\n   <div className=\"App\"> \n\t <Header />\n\t <form ref=\"formulir\" className=\"form-inline\">\n          <input type=\"text\" className=\"form-control\" size=\"10\" ref=\"jam\" placeholder=\"jam aktivitas\" />\n          <input type=\"text\" className=\"form-control\" size=\"30\" ref=\"aktivitas\" placeholder=\"jenis aktivitas\" />\n          <button onClick={this.addTodo} className=\"btn btn-info\">simpan</button>\n        </form>\n\t<hr/>\n\t\t<div>\n\t\t<ul>\n\t\t <CSSTransitionGroup\n            transitionName=\"animasi\"\n            transitionEnter={true}\n            transitionEnterTimeout={500}\n            transitionLeave={true}\n            transitionLeaveTimeout={500}>\n\t\t\t{this.state.todos.map((data,i)=>\n\t\t\t<li key={i}>\n\t\t\t\t  <div className=\"todo-wrapper\">\n\t\t\t\t\t<button onClick={()=>this.removeTodo(i)} className=\"btn btn-outline-danger\"> hapus </button> {data.jam} : {data.aktivitas}\n\t\t\t\t</div>\n\t\t\t</li>\n\t\t\t)}\n\t\t</CSSTransitionGroup>\n\t\t</ul>\n\t</div>\n    </div>\n\t\t);\n\t}\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}